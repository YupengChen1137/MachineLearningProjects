# -*- coding: utf-8 -*-
"""SVM_Kmeans_GMM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGSB9wCYU2mv_HQ3kaMhTH88wM170Bam

Author Name: Yupeng Chen
"""

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')

"""
Author      : Zeyuan Chen, adapted from Yi-Chieh Wu, Sriram Sankararman
Description : Twitter
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


from sklearn import metrics 
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.mixture import GaussianMixture
from sklearn.metrics.cluster import adjusted_rand_score

import pandas as pd
### ========== TODO : START ========== ###
# append you own path to the tweeter_df.txt file after "/content/drive/My Drive/"
# i.e. "/content/drive/My Drive/CM146HW4/tweets_df.txt"
tweets_df = pd.read_csv("/content/drive/My Drive/CS146-HW4/tweets_df.txt", index_col = 0)
### ========== TODO : END ========== ###

X = tweets_df.values[:,:-2]
y = tweets_df.values[:, -2]
movies = tweets_df.values[:, -1]

train_idx = np.where((movies == 1) | (movies == 3))[0]
dev_idx   = np.where(movies == 2)[0]
test_idx  = np.where(movies == 0)[0]

X_train, X_dev, X_test = X[train_idx,], X[dev_idx,], X[test_idx,]
y_train, y_dev, y_test = y[train_idx,], y[dev_idx,], y[test_idx,]

### ========== TODO : START ========== ###
# part 4.1a: show the train and development set f1-score when C is set to 10^-3 10^-2 10^-1 1, 10, 100, 1000
#            This can typically be done in 20 lines or so

# initialize parameters
C_list = [0.001, 0.01, 0.1, 1, 10, 100, 1000]
train_f1_scores_list = []
dev_f1_scores_list = []

for C in C_list:
  # initialize and train the model on train set
  clf_SVC = SVC(kernel = 'linear', C = C)
  clf_SVC.fit(X_train, y_train)
  # calculation f1-scores on train and dev set
  y_train_pred = clf_SVC.predict(X_train)
  train_f1_scores_list.append(metrics.f1_score(y_train, y_train_pred))
  y_dev_pred = clf_SVC.predict(X_dev)
  dev_f1_scores_list.append(metrics.f1_score(y_dev, y_dev_pred))

#plot the trend of f1-scores on train and dev set
plt.figure()
plt.plot(train_f1_scores_list, label="Train F1-Score")
plt.plot(dev_f1_scores_list, label="Development F1-Score")
plt.xlabel('C')
plt.ylabel('F1-Score')
plt.legend()
plt.show()

print("Best Train C: ", C_list[np.argmax(train_f1_scores_list)])
print("Train F1-Score: ", train_f1_scores_list[np.argmax(train_f1_scores_list)])
print("Best Development C: ", C_list[np.argmax(dev_f1_scores_list)])
print("Development F1-Score: ", dev_f1_scores_list[np.argmax(train_f1_scores_list)])
### ========== TODO : END ========== ###

### ========== TODO : START ========== ###
# part 4.1b: select the best model based on development set f1-score 
#            retrain the model on train and dev set
#            test the final model on the test set
#            This can typically be done in 5 lines or so

# train and fit a new model on the combined data
selected_C = C_list[np.argmax(dev_f1_scores_list)]
new_train_dev_model = SVC(kernel = 'linear', C = selected_C)
X_train_dev = np.concatenate((X_train, X_dev), axis = 0)
y_train_dev = np.concatenate((y_train, y_dev), axis = 0)
new_train_dev_model.fit(X_train_dev, y_train_dev)
y_test_pred = new_train_dev_model.predict(X_test)
print("F1-score on the test set: ", metrics.f1_score(y_test, y_test_pred))
### ========== TODO : END ========== ###

def plot_scatter(embedding_2d, labels, show = True, save_as = None, title = None):
    """
    Visualize 2D data

    Parameters
    --------------------
        embedding_2d   -- numpy array of shape (n,2) samples
        labels         -- numpy array of shape (n,) labels
        show           -- optional boolean indicator on if display the visualziation, default set to True 
        save_as        -- optional string indicating where we should save the figure, default set to None
        title          -- optional string indicating what should be the title, default set to None
    --------------------
        None    
    """
    
    plt.scatter(embedding_2d[:,0], embedding_2d[:,1], c = labels) 
    if title is not None:
        plt.title(title)
    if save_as is not None:
        plt.savefig(save_as)
    if show:
        plt.show()

pca = PCA(n_components=2)
pca.fit(X)
X_embedding = pca.transform(X)

### ========== TODO : START ========== ###
# part 4.2a: visualize the embedding. First color the dots by positive or negative review, then by movies 
#            This can typically be done in 2 lines or so
plot_scatter(X_embedding, y, title = "Colored by Reviews")
plot_scatter(X_embedding, movies, title = "Colored by Movies")
### ========== TODO : END ========== ###

### ========== TODO : START ========== ###
# part 4.2b: First color the dots by Kmeans with 4 components, random initialization, 1 iteration, random_state = 2
#            then by GMM with 4 components, random starting point, 1 iteration and random_state = 0
#            report the adjusted rand score for both
#            This can typically be done in 10 lines or so

# initialize, train, and fit the KMeans model
k_means = KMeans(n_clusters = 4, init = 'random', n_init = 1, random_state = 2)
k_means.fit(X_embedding)
pred_k_means = k_means.predict(X_embedding)
plot_scatter(X_embedding, pred_k_means, title = "Colored with KMeans")
print("Adjusted Random Score for K-means:", adjusted_rand_score(movies, pred_k_means))

# initialize, train, and fit the GMM model
gmm = GaussianMixture(n_components=4, init_params='random', n_init=1, random_state=0)
gmm.fit(X_embedding)
pred_gmm = gmm.predict(X_embedding)
plot_scatter(X_embedding, pred_gmm, title="Colored with GMM")
print("Adjusted Random Score for GMM:", adjusted_rand_score(movies, pred_gmm))
### ========== TODO : END ========== ###

### ========== TODO : START ========== ###
# part 4.2c: First color the dots by Kmeans with 4 components, random initialization, 100 iterations, random_state = 2
#            then by GMM with 4 components, random starting point, 100 iterations and random_state = 0
#            report then adjusted rand score for both
#            This can typically be done in 10 lines or so

# initialize, train, and fit the KMeans model
k_means = KMeans(n_clusters = 4, init = 'random', n_init = 100, random_state = 2)
k_means.fit(X_embedding)
pred_k_means = k_means.predict(X_embedding)
plot_scatter(X_embedding, pred_k_means, title = "Colored with KMeans")
print("Adjusted Random Score for K-means:", adjusted_rand_score(movies, pred_k_means))

# initialize, train, and fit the GMM model
gmm = GaussianMixture(n_components=4, init_params='random', n_init=100, random_state=0)
gmm.fit(X_embedding)
pred_gmm = gmm.predict(X_embedding)
plot_scatter(X_embedding, pred_gmm, title="Colored with GMM")
print("Adjusted Random Score for GMM:", adjusted_rand_score(movies, pred_gmm))
### ========== TODO : END ========== ###

